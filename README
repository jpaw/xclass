Consider the following problem:

There is a family of Java classes, and each of them is known to implement a couple of static methods,
for example factory methods.
What we would like to have, is a way to obtain a common handle for this class family (like an interface)
and also to be able to have a type-safe invocation of those static methods.

In Java, the only way to approach is is by Reflection.

Using xtend's active annotations, we can get compile-time checks if all classes really implement the interfaces
as desired. Code to invoke the methods can be hidden (and autogenerated).

The intended concept is as follows:

1) The common static methods are defined in a some interface, say Example.xtend

2) The interface is annotated with an active annotation @XClass (without parameters) which
   creates a class ExampleDispatcher, which implements the interface. The method implementations
   perform lookup via reflection and invoke static methods of its instances.

3) The actual member classes of the family are annotated with an Active Annotation @Implements,
   with an interface type parameter (defining the expected static methods).
   The active annotation creates static class initialization code which registers the class 
   with the dispatcher class.
   It also performs compile-time verification, that all methods defined in the interface are
   implemented in the class, with identical parameters and compatible return types, as static
   public methods.
   Every class of these corresponds to one instance of the dispatcher class (xclass).
   The static methods of the classes can be invoked via the instances of the dispatcher class:


   @XClass
   interface Example {
       def void dosomething(int z)
   }

   @Implements(typeof(Example))
   class SomeClass1 {
      def static public void doSomething(int value) {
         xxxx
      }
   }
   @Implements(typeof(Example))
   class SomeClass2 {
      def static public void doSomething(int value) {
         yyyy
      }
   }



   class SomeOtherClass {
      def myMethods(ExampleDispatcher x) {
          x.doSomething(42)
      }
   }

